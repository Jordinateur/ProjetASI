package client;

import hs.ejb.GardienManagerRemote;
import hs.ejb.MatchHockeyManagerRemote;
import hs.entity.Gardien;
import hs.entity.MatchHockey;

import java.awt.CardLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.security.Security;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

import org.jboss.sasl.JBossSaslProvider;

public class HockeyApplet extends JApplet {
	private MatchHockeyManagerRemote matchManagerRemote = null;
	private JTextField passField;
	private JTextField loginField;
	private JPanel panel_wrapper;
	static {
        Security.addProvider(new JBossSaslProvider());
    }
	/**
	 * Create the applet.
	 */
	public HockeyApplet() {
		try {
			matchManagerRemote = (MatchHockeyManagerRemote) lookupRemote("MatchHockeyManager",false);
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		getContentPane().setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		
		List<MatchHockey> lm = matchManagerRemote.allMatchHockey(); 
		MatchHockey[] ga = new MatchHockey[lm.size()];
		int i = 0;
		for (Iterator iterator = lm.iterator(); iterator.hasNext();) {
			MatchHockey match = (MatchHockey) iterator.next();
			ga[i] = match;
			i++;
		}
		
		panel_wrapper = new JPanel();
		getContentPane().add(panel_wrapper);
		panel_wrapper.setLayout(new CardLayout(0, 0));
		
		JPanel panel = new JPanel();
		panel_wrapper.add(panel, "name_174382275343371");
		
		JLabel lblNewLabel = new JLabel("Login");
		panel.add(lblNewLabel);
		
		loginField = new JTextField();
		panel.add(loginField);
		loginField.setColumns(10);
		
		JLabel lblPassword = new JLabel("Password");
		panel.add(lblPassword);
		
		passField = new JTextField();
		panel.add(passField);
		passField.setColumns(10);
		
		JButton btnSeConnecter = new JButton("se connecter");
		btnSeConnecter.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(loginField.getText().equals("user") && passField.getText().equals("pass")){
					CardLayout cl = (CardLayout) panel_wrapper.getLayout();
					cl.next(panel_wrapper);
				}
			}
		});
		panel.add(btnSeConnecter);
		
		JPanel panel_1 = new JPanel();
		panel_wrapper.add(panel_1, "name_174382287812009");
		
		JButton btnSelectionner = new JButton("Selectionner");
		panel_1.add(btnSelectionner);
		JList listMatch = new JList(ga);
		listMatch.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		panel_1.add(listMatch);
		

	}
	private static Object lookupRemote(String cl,boolean statef) throws NamingException {
    	Object remote=null;
        try {
        	Properties jndiProps = new Properties();
            //jndiProps.put(Context.INITIAL_CONTEXT_FACTORY, org.jboss.naming.remote.client.InitialContextFactory.class.getName());
            jndiProps.setProperty(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming");
            jndiProps.put(Context.INITIAL_CONTEXT_FACTORY, "org.jboss.naming.remote.client.InitialContextFactory");
            jndiProps.setProperty("jboss.naming.client.connect.options.org.xnio.Options.SASL_POLICY_NOPLAINTEXT", "false");
            jndiProps.setProperty(Context.PROVIDER_URL, "remote://localhost:4447");
            jndiProps.put("jboss.naming.client.ejb.context", true);
            
            InitialContext ctx = new InitialContext(jndiProps);
            if(statef){
            	remote = ctx.lookup("ejb:/HockeyEAR/HockeyEJB/GardienManager!hs.ejb.GardienManagerRemote");
            }else{
            	remote = ctx.lookup("ejb:/HockeyEAR/HockeyEJB/MatchHockeyManager!hs.ejb.MatchHockeyManagerRemote");            	
            }
        	} catch (Exception e) {
            e.printStackTrace();
        		}    	
        return remote;
    }
}
